#!/usr/bin/env python3

import argparse
import csv
import sys
from collections import namedtuple
from datetime import datetime
from pathlib import Path
from textwrap import dedent

OLIGO_GBS = {
    "i7": dedent(
        """LOCUS       ClonMapper-REV-i7-{name} 47 bp    DNA     linear   UNA {date}
FEATURES             Location/Qualifiers
     misc_feature    1..24
                     /standard_name="P7"
     misc_feature    complement(25..32)
                     /standard_name="i7-{index}"
     primer_bind     33..47
                     /standard_name="Binding Region"
ORIGIN      
       {sequence}
//
"""
    ),  # 1 caagcagaag acggcatacg agatnnnnnn nngtctcgtg ggctcgg
    "i5": dedent(
        """LOCUS       ClonMapper-FWD-i5-{name} 51 bp    DNA     linear  UNA {date}
FEATURES             Location/Qualifiers
     misc_feature    1..20
                     /standard_name="P5"
     misc_feature    30..37
                     /standard_name="i5-{index}"
     primer_bind     38..51
                     /standard_name="Binding Region"
ORIGIN      
       {sequence}
//
"""
    ),  # 1 aatgatacgg cgaccaccga gatctacacn nnnnnnntcg tcggcagcgt c
}

OLIGO_SEQS = {
    # "fwd": "aatgatacggcgaccaccgagatctacacnnnnnnnntcgtcggcagcgtc",
    "i5": "aatgatacggcgaccaccgagatctacac{index}tcgtcggcagcgtc",
    # "rev": "caagcagaagacggcatacgagatnnnnnnnngtctcgtgggctcgg"
    "i7": "caagcagaagacggcatacgagat{index}gtctcgtgggctcgg",
}

Index = namedtuple("Index", "name type sequence")


def error(message):
    print(f"ERROR: {message}")
    sys.exit(1)


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-o", "--output", default="clonmapper-oligos")
    parser.add_argument("-i", "--input", default="indices.csv")
    parser.add_argument(
        "-f", "--format", default="tsv", choices=["gb", "gb-combined", "csv", "tsv"]
    )

    return parser.parse_args()


def generate_genbank_seq(index, direction):
    template = OLIGO_SEQS[direction].format(index=index)
    split_template = [template[i : i + 10] for i in range(0, len(template), 10)]
    template_lines = [
        " ".join(split_template[i : i + 6]) for i in range(0, len(split_template), 6)
    ]
    labels = [f"{i:>9}" for i in range(1, len(template), 60)]
    template_complete = "\n".join(
        [" ".join([label, seq]) for label, seq in zip(labels, template_lines)]
    )
    return template_complete


def reverse_complement(seq):
    reverse_base = {"A": "T", "T": "A", "G": "C", "C": "G"}
    return "".join([reverse_base[base] for base in seq][::-1])


def make_genbank(index):
    return OLIGO_GBS[index.type].format(
        name=index.name,
        index=index.sequence,
        date=datetime.today().strftime("%d-%b-%Y").upper(),
        sequence=generate_genbank_seq(reverse_complement(index.sequence), index.type),
    )


def text_writer(seqs, output, format):
    seps = {"csv": ",", "tsv": "\t"}
    print(f"writing oligos to {output}.{format}")
    with Path(f"{output}.{format}").open("w") as f:
        for seq in seqs:
            f.write(seps[format].join(seq) + "\n")


def read_indices(filepath):
    with filepath.open("r") as csvfile:
        reader = csv.DictReader(csvfile)
        return [Index(**row) for row in reader]

def oligo_name(index):
    direction = "FWD" if index.type == "i5" else "REV"
    return f"ClonMapper-{direction}-{index.type}-{index.name}"


def main():
    args = get_args()
    for k, v in args.__dict__.items():
        print(f"{k:<10} > {v}")

    indices = read_indices(Path(args.input))

    if "sv" in args.format:
        seqs = [
            (
                oligo_name(index),
                OLIGO_SEQS[index.type].format(index=reverse_complement(index.sequence)),
            )
            for index in indices
        ]

        text_writer(seqs, args.output, args.format)

    elif "gb" in args.format:
        genbanks = {}
        for index in indices:
            genbanks[oligo_name(index)] = make_genbank(index)

        if args.format == "gb":
            print(f"saving genbanks in {args.output}")
            outdir = Path.cwd() / args.output
            outdir.mkdir(exist_ok=True)

            for name, gb in genbanks.items():
                with (outdir / f"{name}.gb").open("w") as f:
                    f.write(gb)

        elif args.format == "gb-combined":
            print(f"saving genbank as {args.output}.gb")
            with (Path(f"{args.output}.gb")).open("w") as f:
                f.write("\n".join(genbanks.values()))


if __name__ == "__main__":
    main()
